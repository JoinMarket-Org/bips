<pre>
  BIP: XYZ
  Title: Extended Transaction
  Author: Noel Tiernan <tier.nolan@gmail.com>
  Status: Draft
  Type: Standards Track
  Created: 2015-05-10
</pre>

==Abstract==

Transactions reference all unspent transaction outputs (UTXOs) by transaction id (txid) and index.  No other information about the UTXO is contained in the transaction which spends it.

This BIP describes a transaction serialization wth sufficient infomation about the UTXOs being spent to fully verify the transaction, other than UTXO existence and double spend checks.  This is purely a network protocol change.  The transaction serialization used for signing and generating the txid is not modified.

==Motivation==

The are primarily two benefits from this change.

# Each UTXOs entry in the database can be reduced in size
# Improves transactions verification locality

====UTXO Entry Size====

Every transaction that has at least one unspent output is contained in the UTXO database.

For each UTXO, four pieces of information are stored; the value of the UTXO, the scriptPubKey, the height it was included in the chain and if the transaction was a coinbase transaction.

At the time of writing, the UTXO set serialization is 35.89 bytes per UTXO.

If all the information about the UTXOs of the inputs was included with the transaction, then the UTXOs could be stored in the database as a set of digests.  It would be possible to verify that the inputs into the transaction was available for spending by verifying that the digest of the UTXO was in the database.

If 8 byte digests were used as UTXO identifiers for the 20 million UTXOs in the set, the odds of a collision is 1 in 92234.  With 10 bytes, the odds are one in 6 billion.  Since the height of inclusion in the block chain is included as part of the UTXO data, the digest for each of the inputs into a transaction will be different for later blocks.  This means that the colliding transactions likely won't collide for more than 1 particular block height.

Collisions are unlikely to occur in practice, a soft fork rule is to simply reject blocks that cause a collision.  This is dealt with in another BIP.

====Transaction Verification Locality====

If the scriptPubKey, value and coinbase status for all UTXOs spent by a transaction are known, transactions can be nearly completely verified without any additional information.  The only checks that can't be done locally are checking for double spending and making sure the outputs spent actually exist.

This could help with the new consensus ibrary.  The block verification function could be given a block header and a list of transactions, which include the UTXO information, and it could verify them locally.  The function could give a list of the digests of all UTXOs consumed, and a list of the digests of all new digests created.  A client using the library only has to manage the UTXO digest set.  Everything else can be handled by the consensus library.

==Specification==

This BIP defines a change to how transactions are encoded.  This affects the transaction, "tx", and block, "block" messages.  The new serialization format is used if the protocol version number is 70003 or greater.

The format change only applies to the p2p protocol.  Transactions are still serialized as before when signing and determining the txid.

====Transaction Message====

The new transaction, "tx", message is identical, except for additional fields in the OutPoint datatype.  The new OutPoint field is defined as follows.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32 || txid || uint256 || The txid of the referenced transaction
|-
| 4 || index || uint32_t || The index of the UTXO
|-
| 1 || utxo_type || uchar || The type of the UTXO (New)
|-
| 8 || value || int64_t || The value of the UTXO (New)
|-
| 1+ || pk_script_length || var_int || Length of the pk_script (New)
|-
| ? || pk_script || uchar[] || The public key script for the output (New)
|-
| 1+ || height || var_int || The block height the transaction was included in (New)
|}

The height should be set to zero, if the input into the transaction has not been included in a block yet.

It is recommended that nodes which set the height to zero for transactions buried more than 20 blocks deep in the main block chain are considered misbehaving node.

There are four UTXO types.

{|class="wikitable"
! Value !! Name !! Description
|-
| 0x01 || UTXO_RAW || Uncompressed pk_script
|-
| 0x02 || UTXO_P2SH || Pay to script hash template
|-
| 0x04 || UTXO_P2PKH || Pay to public key hash template
|-
| 0x80 || UTXO_COINBASE || Indicats a coinbase transaction
|-
| 0xFF || UTXO_UNKNOWN || Reserved (used internally)
|}

The UTXO_COINBASE flag can be combined with any of the other 3.

The pk_script array is only used for the UTXO_RAW type.  In the other two cases, it stores a zero length array and the pk_script is recovered from the signature script.  

If the scriptSig is not push only, the UTXO_RAW type must be used.  Otherwise, for UTXOs which match one of the two template, the UTXO_P2SH and UTXO_P2PKH type must be used.

====Block Message====

The new block, "block", message is identical to the block message, except transaction are serialized as using the new format.

====PK Script Recovery====

The pk_script can be recovered from the signature script when the pay to script hash and pay to public key hash templates are used.

The signature script is run to determine the top entry in the stack.  If the stack is empty or the top entry is not 20 bytes, then the transaction is invalid.

Since inputs where the signature script contains non-push operations must use the UTXO_RAW type and do not need recovery, script evaluation is very fast.

The template for P2SH is as follows.

{|class="wikitable"
! Byte Index !! Byte Value !! Opcode Name ||  Notes
|-
| 0 || 0xA9 || OP_HASH160 || 
|-
| 1 || 0x14 || Push 20 bytes || 
|-
| 2-21 || Script Hash || n/a || Copy the top of the stack
|-
| 22 || 0x87 || OP_EQUAL || 
|}

The template for P2PKH is as follows.

{|class="wikitable"
! Byte Index !! Byte Value !! Opcode Name ||  Notes
|-
| 0 || 0x76 || OP_DUP || 
|-
| 1 || 0xA9 || OP_HASH160 || 
|-
| 2 || 0x14 || Push 20 bytes || 
|-
| 3-22 || Key Hash || n/a || Copy the top of the stack
|-
| 23 || 0x88 || OP_EQUALVERIFY ||
|-
| 24 || 0xAC || OP_CHECKSIG ||
|}

==Deployment==

The PROTOCOL_VERSION is incremented from 70002 to 70003.

Transactions and blocks received from legacy nodes are converted to the new format before forwarding to upgraded peers.

The undo database must be reindexed to include the extra information.

==Backward Compatibility==

The protocol change is fully backwards compatible.  Communication with nodes with version numbers below 70003 use the original OutPoint format.
