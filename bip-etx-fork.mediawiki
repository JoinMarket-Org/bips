<pre>
  BIP: XYZ
  Title: Extended Transaction Collision Avoiding Soft Fork
  Author: Noel Tiernan <tier.nolan@gmail.com>
  Status: Draft
  Type: Standards Track
  Created: 2015-05-10
</pre>

==Abstract==

This BIP describes a soft fork for ensuring that no collisions occur ...

==Motivation==

If UTXO set commitments are based on CanonicalDigest, then collision avoidance is essential.


==Specification==

A new OutPoint field is defined in BIP XYZ, as follows.

{|class="wikitable"
! Field Size !! Description !! Data type !! Comments
|-
| 32 || txid || uint256 || The txid of the referenced transaction
|-
| 4 || index || uint32_t || The index of the UTXO
|-
| 1 || utxo_type || uchar || The type of the UTXO (New)
|-
| 8 || value || int64_t || The value of the UTXO (New)
|-
| 1+ || pk_script_length || var_int || Length of the pk_script (New)
|-
| ? || pk_script || uchar[] || The public key script for the output (New)
|-
| 1+ || height || var_int || The block height the transaction was included in (New)
|}

There are three UTXO types.

{|class="wikitable"
! Value !! Name !! Description
|-
| 0 || UTXO_RAW || Uncompressed pk_script
|-
| 1 || UTXO_P2SH || Pay to script hash template
|-
| 2 || UTXO_P2PKH || Pay to public key hash template
|}

The pk_script array is only used for the UTXO_RAW type.  In the other two cases, it stores a zero length array and the pk_script is recovered from the signature script.  

Use of the UTXO_P2SH and UTXO_P2PKH type is mandatory, if the UTXO matches the template.

==Canonical Digest==

The canonical digest for each UTXO shall be equal to first 8 bytes of the digest given when the UTXO is serialized using the new OutPoint format and passed to the double SHA256 hash function.  A canonical salt is prepended to the byte array.

    
    CanonicalDigest = Hash(CanonicalSalt | UTXO OutPoint Serialization)
    

==Special Case Rule For BIP30 Compliance==

There are two pairs of coinbase transactions that have the same txid.  Only one output of each pair is spendable, but all 4 outputs generate unique canonical digests.

This means that all 4 are spendable nodes which use the digests alone to verify the UTXO set.

An additional rule prevents all 4 outputs being added into the UTXO set.  This can be achieved by excluding the 2nd coinbase of each pair from being included in the UTXO set.  The condition is the same as for BIP30.

    
    bool fExcludeCoinbaseUTXO = !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256("0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec")) ||
                                  (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256("0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721")));
    

When processing those two blocks, the UTXO from the coinbase must not be added to the UTXO set.

==Soft Fork Rule==

Two UTXOs are considered to collide if they both have the same canonical digest.

Transactions with outputs which collide with entries in the UTXO set may not be included in the block.  UTXO entries are not considered to be freed until the end of the block.

Since the height field is incremented for each block.  In the unlikely event of a collision, the colliding unconfirmed transaction can simply be included in the next block.

==Deployment==

The block version is increased to version 4.

If 750 of the previous 1000 blocks are version 4 or higher, the rule is active for all blocks.  Otherwise, the canonical salt is reset to zero.

If canonical salt is zero for a block where the rule is active, the canonical salt is set to the hash of the block being connected to the chain and a collision test is performed.  If a collision occurs, then the canonical salt is reset to zero.

Once a non-colliding canonical salt is found, subsequent blocks which cause a collision are rejected.

If 950 of the previous 1000 blocks are version 4 or higher, version 3 and lower blocks are rejected.

==Backward Compatibility==

After the fork is accepted, three types of nodes are possible.

* Legacy nodes
* Full Border nodes
* UTXO-lite nodes

Legacy nodes are nodes which haven't upgraded to the extended transaction format.  

Full border nodes are upgraded nodes which maintain the full UTXO set.  They can add the extra info for the transaction and block messages received from legacy nodes and forward them to UTXO-lite nodes.  They act as border nodes between legacy and UTXO-lite nodes.

UTXO-lite nodes are nodes which only store the UTXO digest set.  This type of node would not exist immediately.  As long as they receive blocks with the extra OutPoint information, they are fully verifying nodes.  They could send blocks directly to legacy nodes, but could not receive blocks from them.  UTXO-lite nodes would be recommended to only make outgoing connections to upgraded nodes.

If all miners run upgraded nodes, then all new blocks would initially be broadcast in extended format and legacy nodes could receive downgraded versions.

Legacy nodes may be unable to spend their coins unless they peer with nodes that can perform the upgrade, directly or indirectly.  Wallet software could easily be updated to add the extra information.  It is more efficient for wallets to manage their own UTXOs than expecting the data to be stored on every noce.  This creates an incentive for wallet users to upgrade.  

==Locally Salted Extended Digests==

UTXO-lite nodes should use additional bytes for the digest using a locally generated salt value.

    Salt[31:0] = RandomBytes()
    FullHash = hash(UTXO Serialization)
    CanonicalDigest = H(7:0)
    SaltedDigest = hash(Salt | FullHash)
    
    LocalDigest  = CanonicalDigest[7:0] | SaltedDigest[3:0]
    
This mitigates against an attack where an attacker tries to find an OutPoint with a canonical digest that is already in the UTXO set.  This would allow the attacker to spend the fake UTXO, which could have any value up to 21 million BTC.  By having some locally generated bytes and some canonical bytes in the digest, collisions can be avoided, while still mitigating this attack.

It is expected that mining pools would use more than 4 bytes or more likely run full border nodes.
